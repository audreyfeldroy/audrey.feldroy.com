# AUTOGENERATED! DO NOT EDIT! File to edit: ../posts/2025-02-13-Excavating-a-Lost-CLI-Tool.ipynb.

# %% auto 0
__all__ = ['title_it', 'main']

# %% ../nbs/2025-02-13-Excavating-a-Lost-CLI-Tool.ipynb 4
from datetime import datetime
import google.generativeai as genai
import IPython
import json
from nbdev.export import nb_export
from pathlib import Path
import typer
from typing_extensions import Annotated

# %% ../nbs/2025-02-13-Excavating-a-Lost-CLI-Tool.ipynb 10
def title_it(nb, nbpath):
    date = datetime.fromtimestamp(Path(nbpath).stat().st_mtime).strftime('%Y-%m-%d')
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
    prompt = f"""Given this Jupyter notebook, create a filename-title pair following these steps:
1. Prefix the filename with `{date}-` but not the title.
2. Think about what would be most compelling about the given notebook if it were published as a blog post.
3. Create a list of 20 compelling titles for it.
4. Pick the top title from the list of 20 titles. 
5. Convert it to the format: {date}-Words-In-Title-Case-With-Hyphens.ipynb
6. Remove any special characters (like commas)
7. If the title and/or filename sound repetitive, simplify them

<notebook>{nb}</notebook>

Return ONLY json like {{"title": "my_title", "filename": "{date}-my_filename.ipynb"}}, nothing else. Do not add a fenced code block. Just the JSON, please."""
    response = model.generate_content(prompt, safety_settings=[], request_options = {"timeout": 1000})
    try:
        return response.text
    except Exception as ex:
        raise ex

# %% ../nbs/2025-02-13-Excavating-a-Lost-CLI-Tool.ipynb 15
def main(
    prompt: Annotated[bool, typer.Option(help="Confirm each file before renaming.")] = True,
):
    """Rename Untitled notebooks with meaningful names based on their content."""
    for p in Path('.').glob('Untitled*.ipynb'):
        with open(p) as f: nb = f.read()
        cleaned = title_it(nb, p).replace('```json', '').replace('```', '').strip()
        new_names = json.loads(cleaned)
        proposed = new_names['filename']
        
        if prompt:
            print(f"\nProposed filename: {proposed}")
            edit = typer.confirm("Would you like to edit this filename?")
            if edit:
                proposed = typer.prompt("Enter new filename")
            proceed = typer.confirm(f"Rename {p} to {proposed}")
            if not proceed:
                continue
        
        p.rename(proposed)
        print(f"Renamed {p} to {proposed}")

# %% ../nbs/2025-02-13-Excavating-a-Lost-CLI-Tool.ipynb 16
if __name__ == "__main__":
    typer.run(main)
